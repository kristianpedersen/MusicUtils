<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let tick = 0" numlines="1" declaredvars="tick"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Waveform {" line1="    triangle = 1," line2="    sawtooth = 2," line3="    sine = 3," line4="    noise = 5," line5="    square10 = 11," line6="    square20 = 12," line7="    square30 = 13," line8="    square40 = 14," line9="    square50 = 15," line10="}" numlines="11"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace music {" line1="    //% shim=music::queuePlayInstructions" line2="    export function queuePlayInstructions(timeDelta: number, buf: Buffer) { }" line3="}" numlines="4"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Sound {" line1="    lol = &quot;kek&quot;" line2="    constructor(notes: number[]) {" line3="    }" line4="" line5="    generate() {" line6="" line7="    }" line8="}" numlines="9"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const bass = new Sound([Note.A, Note.C])" numlines="1" declaredvars="bass"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="for (let ms = 125 * 16; ms &lt; 125 * 16 + 125 * 16; ms += 125) {" line1="    //music.queuePlayInstructions(0, bass)" line2="    tick++" line3="    tick %= 16" line4="}" numlines="5"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="function createSound(wave: Waveform, frequency: number, duration: number, endFrequency?: number, startVolume?: number, endVolume = 0) {" line1="    const b = control.createBuffer(96)" line2="    b.setNumber(NumberFormat.UInt8LE, 0, wave)  // waveform" line3="    b.setNumber(NumberFormat.UInt8LE, 1, 0)     // unused" line4="    b.setNumber(NumberFormat.UInt16LE, 2, frequency)  // frequency" line5="    b.setNumber(NumberFormat.UInt16LE, 4, duration)  // duration (ms)" line6="    b.setNumber(NumberFormat.UInt16LE, 6, 100)  // start volume" line7="    b.setNumber(NumberFormat.UInt16LE, 8, endVolume)    // end volume" line8="    if (!endFrequency) {" line9="        b.setNumber(NumberFormat.UInt16LE, 10, frequency) // end frequency" line10="    } else {" line11="        b.setNumber(NumberFormat.UInt16LE, 10, endFrequency) // end frequency" line12="    }" line13="" line14="    return b" line15="}" numlines="16"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>